<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Dart学习记录</title>
    <link href="/2020/07/16/dart-notes/"/>
    <url>/2020/07/16/dart-notes/</url>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>在变量中所有东西都是对象，而每个对象都是类的实例，无论数字、函数和 null 都是对象，所有对象都继承自 Object 类</p></li><li><p>Dart是强类型，但类型声明是可选的，因为 Dart 可以推断类型。如果要明确说明不需要任何类型，请使用特殊类型 dynamic</p></li><li><p>Dart 支持通用类型，如 List<int>（整数列表）或 List<dynamic>（任何类型的对象列表）</p></li><li><p>Dart 支持顶级函数（如 main()），以及绑定到类或对象（分别是静态方法 static 和实例 instance 方法）的函数</p></li><li><p>类似地，Dart 支持顶级变量，以及绑定到类或对象（静态和实例变量）的变量。实例变量有时被称为字段或属性</p></li><li><p>与 Java 不同，Dart 没有公开、保护和私有的关键字。如果标识符以下划线 _ 开头，则该标识符对其库是私有的</p></li><li><p>标识符可以以字母或下划线 _ 开头，然后是这些字符加上数字的任何组合</p></li></ul><h3 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h3><ul><li>numbers（int 和 double）</li><li>strings</li><li>booleans</li><li>lists</li><li>maps</li><li>runes（用于在字符串中表示Unicode字符）</li><li>symbols</li></ul><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><ul><li>声明</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">enum</span> Color &#123; <span class="hljs-built_in">red</span>, <span class="hljs-built_in">green</span>, <span class="hljs-built_in">blue</span> &#125;<br></code></pre></td></tr></table></figure><ul><li>索引</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">assert</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Color</span>.</span></span>red.index<span class="hljs-operator"> == </span><span class="hljs-number">0</span>);<br><span class="hljs-keyword">assert</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Color</span>.</span></span>green.index<span class="hljs-operator"> == </span><span class="hljs-number">1</span>);<br><span class="hljs-keyword">assert</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Color</span>.</span></span>blue.index<span class="hljs-operator"> == </span><span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><ul><li>所有值</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">List&lt;Color&gt; colors = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Color</span>.</span></span>values;<br><span class="hljs-keyword">assert</span>(colors<span class="hljs-literal">[<span class="hljs-number">2</span>]</span><span class="hljs-operator"> == </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Color</span>.</span></span>blue);<br></code></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>var</li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs excel">// 类似于 JavaScript 中的 <span class="hljs-built_in">var</span>，可以接收任何类型的变量，但不同是 Dart 中 <span class="hljs-built_in">var</span> 变量一旦赋值，就不能再改变其类型<br><span class="hljs-built_in">var</span> <span class="hljs-built_in">t</span>;<br><span class="hljs-built_in">t</span> = <span class="hljs-string">&quot;pany&quot;</span>;<br>// 下面代码在 dart 中会报错，因为变量 <span class="hljs-built_in">t</span> 的类型已经确定为 String<br><span class="hljs-built_in">t</span> = <span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><ul><li>dynamic/Object</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习资料</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令大全记录本</title>
    <link href="/2020/05/30/noteBook/"/>
    <url>/2020/05/30/noteBook/</url>
    
    <content type="html"><![CDATA[<h1 id="Git笔记"><a href="#Git笔记" class="headerlink" title="Git笔记"></a>Git笔记</h1><h2 id="开工大吉"><a href="#开工大吉" class="headerlink" title="开工大吉"></a>开工大吉</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git init  <span class="hljs-regexp">//</span> 初始化目录<br>git pull  <span class="hljs-regexp">//</span> 从仓库更新最新源码<br></code></pre></td></tr></table></figure><h2 id="提交代码三部曲"><a href="#提交代码三部曲" class="headerlink" title="提交代码三部曲"></a>提交代码三部曲</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git add.      <span class="hljs-regexp">//</span> 将修改的文件加入暂存区<br>git commit -m <span class="hljs-regexp">//</span> 将文件提交到分支<br>git push      <span class="hljs-regexp">//</span> 推送代码<br></code></pre></td></tr></table></figure><h2 id="仓库状态"><a href="#仓库状态" class="headerlink" title="仓库状态"></a>仓库状态</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">git status  <span class="hljs-regexp">//</span> 可以看到当前仓库的情况<br>git log     <span class="hljs-regexp">//</span> 可以看到提交的历史记录（看不到被删掉的）<br>git reflog  <span class="hljs-regexp">//</span> 可以查看所有分支的所有操作记录，包括被删掉的commit<br>git diff    <span class="hljs-regexp">//</span> 可以查看到当前修改的内容<br></code></pre></td></tr></table></figure><h2 id="回到过去"><a href="#回到过去" class="headerlink" title="回到过去"></a>回到过去</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git reset --hard HEAD^    <span class="hljs-regexp">//</span> 回到上一个commit<br>git reset --hard HEAD^    <span class="hljs-regexp">//</span> 回到上上个commit<br>git reset --hard xxxxxxx  <span class="hljs-regexp">//</span> 回到指定id的commit (<span class="hljs-number">7</span>位数 git log 前七位)<br></code></pre></td></tr></table></figure><h2 id="开枝散叶"><a href="#开枝散叶" class="headerlink" title="开枝散叶"></a>开枝散叶</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi">git checkout -b <span class="hljs-keyword">name</span>                                      <span class="hljs-comment">// 创建并切换到新的分支</span><br>git checkout -b branch-<span class="hljs-keyword">name</span> origin/branch-<span class="hljs-keyword">name</span>            <span class="hljs-comment">// 在本地和远程建立对应分支</span><br>git branch --<span class="hljs-keyword">set</span>-upstream branch-<span class="hljs-keyword">name</span> origin/branch-<span class="hljs-keyword">name</span>  <span class="hljs-comment">// 将本地分支和远程分支相关联</span><br>git branch                                                <span class="hljs-comment">// 可以看到分支情况</span><br>git branch -d <span class="hljs-keyword">name</span>                                        <span class="hljs-comment">// 可以删除一个分支</span><br>git branch -D <span class="hljs-keyword">name</span>                                        <span class="hljs-comment">// 可以删除一个没被合并过的分支</span><br></code></pre></td></tr></table></figure><h2 id="合二为一"><a href="#合二为一" class="headerlink" title="合二为一"></a>合二为一</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">git <span class="hljs-keyword">merge</span>                 <span class="hljs-comment">// 合并分支，默认的 merge 是 fast forward, 合并就看不出来曾经做过合并</span><br>git <span class="hljs-keyword">merge</span> -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;&quot;</span> --<span class="hljs-keyword">no</span>-ff   <span class="hljs-comment">// 使用 --no-ff 参数普通合并, 合并后会有一个 commit 显示</span><br></code></pre></td></tr></table></figure><h2 id="垃圾站-amp-急救箱"><a href="#垃圾站-amp-急救箱" class="headerlink" title="垃圾站 &amp; 急救箱"></a>垃圾站 &amp; 急救箱</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git checkout -- file    <span class="hljs-regexp">//</span> 可以丢弃工作区的内容 使文件回到暂存区或分支的状态<br>git checkout -- file    <span class="hljs-regexp">//</span> 也可以防止不小心删除 从代码库里重新拉回来<br>git rm name             <span class="hljs-regexp">//</span> 删除文件后需要 commit 同步到版本库<br></code></pre></td></tr></table></figure><h2 id="远程推送"><a href="#远程推送" class="headerlink" title="远程推送"></a>远程推送</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl">git remote add origin git@server-<span class="hljs-keyword">name</span>:<span class="hljs-built_in">path</span>/repo-<span class="hljs-keyword">name</span>.git  <span class="hljs-comment">// 关联一个远程的仓库</span><br>git push -u origin master                                 <span class="hljs-comment">// 第一次将本地 master 推送</span><br>git push origin master                                    <span class="hljs-comment">// 以后推送</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习资料</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/05/25/hello-world/"/>
    <url>/2020/05/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
